                            | #######################################################################
                            | # Test for copying block of size 3;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44804000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20300000000000000 | 	irmovq $3, %rdx		# src and dst have 3 elements
0x014: 30f6a803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 800d02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x047: 6222                 | 	andq %rdx,%rdx		# len < 0?
0x049: 721d01000000000000   | 	jl remain		# if so, goto Done:
                            | 
0x052:                      | Loop:	
0x052: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x05c: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x070: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x072: 718500000000000000   | 	jle lNpos1		# if so, goto Npos:
0x07b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x085:                      | lNpos1:
0x085: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x08f: 62bb                 | 	andq %r11, %r11
0x091: 71a400000000000000   | 	jle lNpos2
0x09a: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0a4:                      | lNpos2:
0x0a4: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0ae: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0b8: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0c2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0c4: 71d700000000000000   | 	jle lNpos3	# if so, goto Npos:
0x0cd: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0d7:                      | lNpos3:
0x0d7: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0e1: 62bb                 | 	andq %r11, %r11
0x0e3: 71f600000000000000   | 	jle nextLoop
0x0ec: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0f6:                      | nextLoop:
0x0f6: c0f72000000000000000 | 	iaddq $32, %rdi
0x100: c0f62000000000000000 | 	iaddq $32, %rsi
0x10a: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x114: 705200000000000000   | 	jmp Loop
                            | 
0x11d:                      | remain:
0x11d: c0f20300000000000000 | 	iaddq $3, %rdx
0x127: 720c02000000000000   | 	jl Done
0x130: 73e301000000000000   | 	je rEqual
0x139: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x143: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x14d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x157: 62aa                 | 	andq %r10, %r10
0x159: 716c01000000000000   | 	jle rNpos1:
0x162: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x16c:                      | rNpos1:	
0x16c: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x176: 720c02000000000000   | 	jl Done
0x17f: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)		# src++
0x189: 62bb                 | 	andq %r11, %r11		# dst++
0x18b: 719e01000000000000   | 	jle rNpos2
0x194: c0f00100000000000000 | 	iaddq $1, %rax		# if so, goto Loop:
                            | 
0x19e:                      | rNpos2:
0x19e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1a8: 720c02000000000000   | 	jl Done
0x1b1: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x1bb: 40a71000000000000000 | 	rmmovq %r10, 16(%rdi)
0x1c5: 62aa                 | 	andq %r10, %r10
0x1c7: 710c02000000000000   | 	jle Done
0x1d0: c0f00100000000000000 | 	iaddq $1, %rax
0x1da: 700c02000000000000   | 	jmp Done
                            | 
0x1e3:                      | rEqual:
0x1e3: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1ed: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1f7: 62aa                 | 	andq %r10, %r10
0x1f9: 710c02000000000000   | 	jle Done:
0x202: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x20c:                      | Done:
0x20c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x20d:                      | End:
                            | #/* $end ncopy-ys */
0x20d:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 2.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x20d:                      | check:
                            | 	# Return value test
0x20d: 30fa0200000000000000 | 	irmovq $2,%r10
0x217: 61a0                 | 	subq %r10,%rax
0x219: 733502000000000000   | 	je checkb
0x222: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x22c: 707303000000000000   | 	jmp cdone
0x235:                      | checkb:
                            | 	# Code length check
0x235: 30f00d02000000000000 | 	irmovq EndFun,%rax
0x23f: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x249: 6120                 | 	subq %rdx,%rax
0x24b: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x255: 6102                 | 	subq %rax,%rdx
0x257: 757302000000000000   | 	jge checkm
0x260: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x26a: 707303000000000000   | 	jmp cdone
0x273:                      | checkm:
0x273: 30f2a803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x27d: 30f37803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x287: 30f70300000000000000 | 	irmovq $3,%rdi  # Count
0x291: 6277                 | 	andq %rdi,%rdi
0x293: 73f102000000000000   | 	je checkpre         # Skip check if count = 0
0x29c:                      | mcloop:
0x29c: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x2a6: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x2b0: 6160                 | 	subq %rsi,%rax
0x2b2: 73ce02000000000000   | 	je  mok
0x2bb: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x2c5: 707303000000000000   | 	jmp cdone
0x2ce:                      | mok:
0x2ce: 30f00800000000000000 | 	irmovq $8,%rax
0x2d8: 6002                 | 	addq %rax,%rdx	  # dest ++
0x2da: 6003                 | 	addq %rax,%rbx    # src++
0x2dc: 30f00100000000000000 | 	irmovq $1,%rax
0x2e6: 6107                 | 	subq %rax,%rdi    # cnt--
0x2e8: 769c02000000000000   | 	jg mcloop
0x2f1:                      | checkpre:
                            | 	# Check for corruption
0x2f1: 30f2a003000000000000 | 	irmovq Predest,%rdx
0x2fb: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x305: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x30f: 6120                 | 	subq %rdx,%rax
0x311: 732d03000000000000   | 	je checkpost
0x31a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x324: 707303000000000000   | 	jmp cdone
0x32d:                      | checkpost:
                            | 	# Check for corruption
0x32d: 30f2c003000000000000 | 	irmovq Postdest,%rdx
0x337: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x341: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x34b: 6120                 | 	subq %rdx,%rax
0x34d: 736903000000000000   | 	je checkok
0x356: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x360: 707303000000000000   | 	jmp cdone
0x369:                      | checkok:
                            | 	# Successful checks
0x369: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x373:                      | cdone:
0x373: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x378:                      | 	.align 8
0x378:                      | src:
0x378: 0100000000000000     | 	.quad 1
0x380: 0200000000000000     | 	.quad 2
0x388: fdffffffffffffff     | 	.quad -3
0x390: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3a0:                      | 	.align 16
0x3a0:                      | Predest:
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa
0x3a8:                      | dest:
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0:                      | Postdest:
0x3c0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3c8:                      | .align 8
                            | # Run time stack
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
                            | 
0x448:                      | Stack:
